package com.flair.client.presentation.widgets.exerciseGeneration;

import com.flair.shared.exerciseGeneration.DetailedConstruction;

public class ConstructionNameEnumMapper {

	public static DetailedConstruction getEnum(String constructionName) {
		switch(constructionName) {
		case "adj-comp-syn":
			return DetailedConstruction.ADJ_COMP_SYN;
		case "adj-sup-syn":
			return DetailedConstruction.ADJ_SUP_SYN;
		case "adj-comp-ana":
			return DetailedConstruction.ADJ_COMP_ANA;
		case "adj-sup-ana":
			return DetailedConstruction.ADJ_SUP_ANA;
		case "adv-comp-syn":
			return DetailedConstruction.ADV_COMP_SYN;
		case "adv-sup-syn":
			return DetailedConstruction.ADV_SUP_SYN;
		case "adv-comp-ana":
			return DetailedConstruction.ADV_COMP_ANA;
		case "adv-sup-ana":
			return DetailedConstruction.ADV_SUP_ANA;
		case "condReal":
			return DetailedConstruction.CONDREAL;
		case "condUnreal":
			return DetailedConstruction.CONDUNREAL;
		case "passive-TENSE_PRESENT_SIMPLE":
			return DetailedConstruction.PASSIVE_PRESSMP;
		case "passive-TENSE_FUTURE_SIMPLE":
			return DetailedConstruction.PASSIVE_FUTSMP;
		case "passive-TENSE_PRESENT_PROGRESSIVE":
			return DetailedConstruction.PASSIVE_PRESPRG;
		case "passive-TENSE_PAST_PROGRESSIVE":
			return DetailedConstruction.PASSIVE_PASTPRG;
		case "passive-TENSE_FUTURE_PROGRESSIVE":
			return DetailedConstruction.PASSIVE_FUTPRG;
		case "passive-TENSE_FUTURE_PERFECT":
			return DetailedConstruction.PASSIVE_FUTPERF;
		case "passive-TENSE_PRESENT_PERFECT_PROGRESSIVE":
			return DetailedConstruction.PASSIVE_PRESPERFPRG;
		case "passive-TENSE_PAST_PERFECT_PROGRESSIVE":
			return DetailedConstruction.PASSTIVE_PASTPERFPRG;
		case "passive-TENSE_FUTURE_PERFECT_PROGRESSIVE":
			return DetailedConstruction.PASSIVE_FUTPERFPRG;
		case "passive-TENSE_PAST_SIMPLE":
			return DetailedConstruction.PASSIVE_PASTSMP;
		case "passive-TENSE_PRESENT_PERFECT":
			return DetailedConstruction.PASSIVE_PRESPERF;
		case "passive-TENSE_PAST_PERFECT":
			return DetailedConstruction.PASSIVE_PASTPERF;
		case "active-TENSE_PRESENT_SIMPLE":
			return DetailedConstruction.ACTIVE_PRESSMP;
		case "active-TENSE_FUTURE_SIMPLE":
			return DetailedConstruction.ACTIVE_FUTSMP;
		case "active-TENSE_PRESENT_PROGRESSIVE":
			return DetailedConstruction.ACTIVE_PRESPRG;
		case "active-TENSE_PAST_PROGRESSIVE":
			return DetailedConstruction.ACTIVE_PASTPRG;
		case "active-TENSE_FUTURE_PROGRESSIVE":
			return DetailedConstruction.ACTIVE_FUTPRG;
		case "active-TENSE_FUTURE_PERFECT":
			return DetailedConstruction.ACTIVE_FUTPERF;
		case "active-TENSE_PRESENT_PERFECT_PROGRESSIVE":
			return DetailedConstruction.ACTIVE_PRESPERFPRG;
		case "active-TENSE_PAST_PERFECT_PROGRESSIVE":
			return DetailedConstruction.ACTIVE_PASTPERFPRG;
		case "active-TENSE_FUTURE_PERFECT_PROGRESSIVE":
			return DetailedConstruction.ACTIVE_FUTPERFPRG;
		case "active-TENSE_PAST_SIMPLE":
			return DetailedConstruction.ACTIVE_PASTSMP;
		case "active-TENSE_PRESENT_PERFECT":
			return DetailedConstruction.ACTIVE_PRESPERF;
		case "active-TENSE_PAST_PERFECT":
			return DetailedConstruction.ACTIVE_PASTPERF;
		case "TENSE_PAST_SIMPLE-question-neg-irreg":
			return DetailedConstruction.PASTSMP_QUEST_NEG_IRREG;
		case "TENSE_PAST_SIMPLE-question-neg-reg":
			return DetailedConstruction.PASTSMP_QUEST_NEG_REG;
		case "TENSE_PAST_SIMPLE-stmt-neg-irreg":
			return DetailedConstruction.PASTSMP_STMT_NEG_IRREG;
		case "TENSE_PAST_SIMPLE-stmt-neg-reg":
			return DetailedConstruction.PASTSMP_STMT_NEG_REG;
		case "TENSE_PAST_SIMPLE-question-affirm-irreg":
			return DetailedConstruction.PASTSMP_QUEST_AFFIRM_IRREG;
		case "TENSE_PAST_SIMPLE-question-affirm-reg":
			return DetailedConstruction.PASTSMP_QUEST_AFFIRM_REG;
		case "TENSE_PAST_SIMPLE-stmt-affirm-reg":
			return DetailedConstruction.PASTSMP_STMT_AFFIRM_REG;
		case "TENSE_PAST_SIMPLE-stmt-affirm-irreg":
			return DetailedConstruction.PASTSMP_STMT_AFFIRM_IRREG;
		case "TENSE_PRESENT_PERFECT-question-neg-irreg":
			return DetailedConstruction.PRESPERF_QUEST_NEG_IRREG;
		case "TENSE_PRESENT_PERFECT-question-neg-reg":
			return DetailedConstruction.PRESPERF_QUEST_NEG_REG;
		case "TENSE_PRESENT_PERFECT-stmt-neg-irreg":
			return DetailedConstruction.PRESPERF_STMT_NEG_IRREG;
		case "TENSE_PRESENT_PERFECT-stmt-neg-reg":
			return DetailedConstruction.PRESPERF_STMT_NEG_REG;
		case "TENSE_PRESENT_PERFECT-question-affirm-irreg":
			return DetailedConstruction.PRESPERF_QUEST_AFFIRM_IRREG;
		case "TENSE_PRESENT_PERFECT-question-affirm-reg":
			return DetailedConstruction.PRESPERF_QUEST_AFFIRM_REG;
		case "TENSE_PRESENT_PERFECT-stmt-affirm-reg":
			return DetailedConstruction.PRESPERF_STMT_AFFIRM_REG;
		case "TENSE_PRESENT_PERFECT-stmt-affirm-irreg":
			return DetailedConstruction.PRESPERF_STMT_AFFIRM_IRREG;
		case "TENSE_PAST_PERFECT-question-neg-irreg":
			return DetailedConstruction.PASTPERF_QUEST_NEG_IRREG;
		case "TENSE_PAST_PERFECT-question-neg-reg":
			return DetailedConstruction.PASTPERF_QUEST_NEG_REG;
		case "TENSE_PAST_PERFECT-stmt-neg-irreg":
			return DetailedConstruction.PASTPERF_STMT_NEG_IRREG;
		case "TENSE_PAST_PERFECT-stmt-neg-reg":
			return DetailedConstruction.PASTPERF_STMT_NEG_REG;
		case "TENSE_PAST_PERFECT-question-affirm-irreg":
			return DetailedConstruction.PASTPERF_QUEST_AFFIRM_IRREG;
		case "TENSE_PAST_PERFECT-question-affirm-reg":
			return DetailedConstruction.PASTPERF_QUEST_AFFIRM_REG;
		case "TENSE_PAST_PERFECT-stmt-affirm-reg":
			return DetailedConstruction.PASTPERF_STMT_AFFIRM_REG;
		case "TENSE_PAST_PERFECT-stmt-affirm-irreg":
			return DetailedConstruction.PASTPERF_STMT_AFFIRM_IRREG;
		case "present-question-neg-3":
			return DetailedConstruction.QUEST_NEG_3;
		case "present-question-neg-not3":
			return DetailedConstruction.QUEST_NEG_NOT3;
		case "present-stmt-neg-3":
			return DetailedConstruction.STMT_NEG_3;
		case "present-stmt-neg-not3":
			return DetailedConstruction.STMT_NEG_NOT3;
		case "present-question-affirm-3":
			return DetailedConstruction.QUEST_AFFIRM_3;
		case "present-question-affirm-not3":
			return DetailedConstruction.QUEST_AFFIRM_NOT3;
		case "present-stmt-affirm-3":
			return DetailedConstruction.STMT_AFFIRM_3;
		case "present-stmt-affirm-not3":
			return DetailedConstruction.STMT_AFFIRM_NOT3;
		case "who":
			return DetailedConstruction.WHO;
		case "which":
			return DetailedConstruction.WHICH;
		case "that":
			return DetailedConstruction.THAT;
		case "otherRelPron":
			return DetailedConstruction.OTHERPRN;
		default:
			throw new IllegalArgumentException();
		}
		
	}
	
}